<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.4" links="1">
 <documentation>&quot;Deferred Event&quot; state pattern example

NOTE: Requries QP6.</documentation>
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${Events}-->
 <package name="Events" stereotype="0x01">
  <!--${Events::SampleEvt}-->
  <class name="SampleEvt" superclass="qpc::QEvt">
   <!--${Events::SampleEvt::prop1}-->
   <attribute name="prop1" type="uint8_t" visibility="0x00" properties="0x00"/>
  </class>
  <!--${Events::DeviceDetectEvt}-->
  <class name="DeviceDetectEvt" superclass="qpc::QEvt"/>
  <!--${Events::DeviceDetectedEvt}-->
  <class name="DeviceDetectedEvt" superclass="qpc::QEvt"/>
  <!--${Events::DeviceReadEvt}-->
  <class name="DeviceReadEvt" superclass="qpc::QEvt"/>
  <!--${Events::DeviceReadCompleteEvt}-->
  <class name="DeviceReadCompleteEvt" superclass="qpc::QEvt"/>
  <!--${Events::DeviceWriteEvt}-->
  <class name="DeviceWriteEvt" superclass="qpc::QEvt"/>
  <!--${Events::DeviceWriteCompleteEvt}-->
  <class name="DeviceWriteCompleteEvt" superclass="qpc::QEvt"/>
 </package>
 <!--${Components}-->
 <package name="Components" stereotype="0x02">
  <!--${Components::Comms}-->
  <class name="Comms" superclass="qpc::QActive">
   <documentation>/* Communications AO */</documentation>
   <!--${Components::Comms::messageQueue}-->
   <attribute name="messageQueue" type="QEQueue" visibility="0x02" properties="0x00"/>
   <!--${Components::Comms::inst}-->
   <attribute name="inst" type="Comms" visibility="0x00" properties="0x01"/>
   <!--${Components::Comms::messageQueueSto[5]}-->
   <attribute name="messageQueueSto[5]" type="QEvt const*" visibility="0x02" properties="0x00"/>
   <!--${Components::Comms::ctor}-->
   <operation name="ctor" type="void" visibility="0x00" properties="0x00">
    <code>QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Comms_initial));
QEQueue_init(&amp;me-&gt;messageQueue,
                  me-&gt;messageQueueSto, Q_DIM(me-&gt;messageQueueSto));</code>
   </operation>
   <!--${Components::Comms::SM}-->
   <statechart properties="0x00">
    <!--${Components::Comms::SM::initial}-->
    <initial target="../1">
     <initial_glyph conn="3,2,4,3,6,13">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <!--${Components::Comms::SM::idle}-->
    <state name="idle">
     <entry brief="recall">printf(&quot;comms-idle-ENTRY;\n&quot;);

/* recall the oldest deferred request... */
if (QActive_recall(&amp;me-&gt;super, &amp;me-&gt;messageQueue)) 
{
    printf(&quot;%s\n&quot;, &quot;Request recalled&quot;);
}
else 
{
    printf(&quot;%s\n&quot;, &quot;No deferred requests&quot;);
}</entry>
     <exit>printf(&quot;comms-idle-EXIT;\n&quot;);</exit>
     <!--${Components::Comms::SM::idle::DEVICE_DETECT}-->
     <tran trig="DEVICE_DETECT" target="../../2/3">
      <tran_glyph conn="16,14,3,1,71,18,-25">
       <action box="0,-2,15,2"/>
      </tran_glyph>
     </tran>
     <!--${Components::Comms::SM::idle::DEVICE_READ}-->
     <tran trig="DEVICE_READ" target="../../2/4">
      <tran_glyph conn="16,18,3,1,73,32,-27">
       <action box="0,-2,13,2"/>
      </tran_glyph>
     </tran>
     <!--${Components::Comms::SM::idle::DEVICE_WRITE}-->
     <tran trig="DEVICE_WRITE" target="../../2/5">
      <tran_glyph conn="16,22,3,1,75,50,-29">
       <action box="0,-2,15,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="16,6,19,18">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <!--${Components::Comms::SM::busy}-->
    <state name="busy">
     <entry>printf(&quot;comms-busy-ENTRY;\n&quot;);</entry>
     <exit>printf(&quot;comms-busy-EXIT;\n&quot;);</exit>
     <!--${Components::Comms::SM::busy::DEVICE_DETECT}-->
     <tran trig="DEVICE_DETECT">
      <action brief="defer">/* defer the new device detect event... */
QActive_defer(&amp;me-&gt;super, &amp;me-&gt;messageQueue, e);
printf(&quot;Device detect deferred;\n&quot;);

</action>
      <tran_glyph conn="16,98,3,-1,28">
       <action box="0,-2,24,2"/>
      </tran_glyph>
     </tran>
     <!--${Components::Comms::SM::busy::DEVICE_READ}-->
     <tran trig="DEVICE_READ">
      <action brief="defer">/* defer the new device read event... */
QActive_defer(&amp;me-&gt;super, &amp;me-&gt;messageQueue, e); 
printf(&quot;Device read deferred;\n&quot;);</action>
      <tran_glyph conn="16,100,3,-1,28">
       <action box="0,-2,19,2"/>
      </tran_glyph>
     </tran>
     <!--${Components::Comms::SM::busy::DEVICE_WRITE}-->
     <tran trig="DEVICE_WRITE">
      <action brief="defer">/* defer the new device write event... */
QActive_defer(&amp;me-&gt;super, &amp;me-&gt;messageQueue, e);
printf(&quot;Device write deferred;\n&quot;);</action>
      <tran_glyph conn="16,102,3,-1,28">
       <action box="0,-2,19,3"/>
      </tran_glyph>
     </tran>
     <!--${Components::Comms::SM::busy::detecting}-->
     <state name="detecting">
      <entry>printf(&quot;comms-detecting-ENTRY;\n&quot;);</entry>
      <exit>printf(&quot;comms-detecting-EXIT;\n&quot;);</exit>
      <!--${Components::Comms::SM::busy::detecting::DEVICE_DETECTED}-->
      <tran trig="DEVICE_DETECTED" target="../../../1">
       <tran_glyph conn="20,40,5,3,-6,-32,2">
        <action box="0,-2,16,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="20,30,42,15">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <!--${Components::Comms::SM::busy::reading}-->
     <state name="reading">
      <entry>printf(&quot;comms-read-ENTRY;\n&quot;);</entry>
      <exit>printf(&quot;comms-read-EXIT;\n&quot;);</exit>
      <!--${Components::Comms::SM::busy::reading::DEVICE_READ_COMPLETE}-->
      <tran trig="DEVICE_READ_COMPLETE" target="../../../1">
       <tran_glyph conn="20,56,3,3,-6,-48,2">
        <action box="0,-2,22,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="20,48,42,18">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <!--${Components::Comms::SM::busy::writing}-->
     <state name="writing">
      <entry>printf(&quot;comms-write-ENTRY;\n&quot;);</entry>
      <exit>printf(&quot;comms-write-EXIT;\n&quot;);</exit>
      <!--${Components::Comms::SM::busy::writing::DEVICE_WRITE_COMPLETE}-->
      <tran trig="DEVICE_WRITE_COMPLETE" target="../../../1">
       <tran_glyph conn="20,78,3,3,-6,-70,2">
        <action box="0,-2,28,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="20,70,42,23">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="16,26,70,92">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="104,123"/>
   </statechart>
  </class>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::defer.c}-->
  <file name="defer.c">
   <text>#include &quot;qpc.h&quot;
#include &quot;bsp.h&quot;

#include &quot;safe_std.h&quot; /* portable &quot;safe&quot; &lt;stdio.h&gt;/&lt;string.h&gt; facilities */

Q_DEFINE_THIS_FILE

/*..........................................................................*/
enum TServerSignals {
    HELLO_WORLD_SIG = Q_USER_SIG, 
    DEVICE_DETECT_SIG,
    DEVICE_DETECTED_SIG,
    DEVICE_READ_SIG,
    DEVICE_READ_COMPLETE_SIG,
    DEVICE_WRITE_SIG,
    DEVICE_WRITE_COMPLETE_SIG,
    TERMINATE_SIG,                /* terminate the application */
};
/*..........................................................................*/
$declare${Events::SampleEvt}    // this was just used to size an event pool
$declare${Events::DeviceDetectEvt}
$declare${Events::DeviceDetectedEvt}
$declare${Events::DeviceReadEvt}
$declare${Events::DeviceReadCompleteEvt}
$declare${Events::DeviceWriteEvt}
$declare${Events::DeviceWriteCompleteEvt}

/* Active object class -----------------------------------------------------*/
$declare${Components::Comms}

$define${Components::Comms}


// test harness ============================================================*/

// Local-scope objects -------------------------------------------------------
static QEvt const *l_tserverQSto[10]; /* Event queue storage for TServer */
static QEvt const *l_commsQSto[10]; /* Event queue storage for Comms */
static QF_MPOOL_EL(SampleEvt) l_smlPoolSto[50]; /* storage for small pool */

/*..........................................................................*/
int main(int argc, char *argv[]) {
    PRINTF_S(&quot;Deferred Event state pattern\nQP version: %s\n&quot;
            &quot;Press 'd' to generate a new device detect request\n&quot;
            &quot;Press 'D' to generate a new device detect complete event\n&quot;
            &quot;Press 'r' to generate a new device read request\n&quot;
            &quot;Press 'R' to generate a new device read complete event\n&quot;
            &quot;Press 'w' to generate a new device write request\n&quot;
            &quot;Press 'W' to generate a new device write complete event\n\n\n&quot;,
           QP_VERSION_STR);

    QF_init(); /* initialize the framework and the underlying RTOS/OS */

    BSP_init(argc, argv); /* initialize the BSP */

    /* publish-subscribe not used, no call to QF_psInit() */

    /* initialize event pools... */
    QF_poolInit(l_smlPoolSto, sizeof(l_smlPoolSto), sizeof(l_smlPoolSto[0]));

    QS_SIG_DICTIONARY(TERMINATE_SIG,   (void *)0);

    /* start the active objects... */
    Comms_ctor(&amp;Comms_inst);
    QACTIVE_START((QActive *)&amp;Comms_inst,
                  2U,
                  l_commsQSto, Q_DIM(l_commsQSto),
                  (void *)0, 0U, (void *)0);

    return QF_run(); /* run the QF application */
}
/*..........................................................................*/
void BSP_onKeyboardInput(uint8_t key) 
{
    switch (key) 
    {
        case '\33': 
        { /* ESC pressed? */
            static QEvt const terminateEvt = { TERMINATE_SIG, 0U, 0U };
            QACTIVE_POST((QActive *)&amp;Comms_inst, &amp;terminateEvt, (void *)0);
            break;
        }
        case 'd':
        {    /* 'd': device detect request */
            DeviceDetectEvt *e = Q_NEW(DeviceDetectEvt, DEVICE_DETECT_SIG);
            /* post directly to comms active object */
            QACTIVE_POST((QActive *)&amp;Comms_inst, (QEvt *)e, (void *)0);
            break;
        }
        case 'D':
        {    /* 'D': device detected */
            DeviceDetectedEvt *e = Q_NEW(DeviceDetectedEvt, DEVICE_DETECTED_SIG);
            /* post directly to comms active object */
            QACTIVE_POST((QActive *)&amp;Comms_inst, (QEvt *)e, (void *)0);
            break;
        }
        case 'r':
        {    /* 'r': device read request */
            DeviceReadEvt *e = Q_NEW(DeviceReadEvt, DEVICE_READ_SIG);
            /* post directly to comms active object */
            QACTIVE_POST((QActive *)&amp;Comms_inst, (QEvt *)e, (void *)0);
            break;
        }
        case 'R':
        {    /* 'R': device read completed */
            DeviceReadCompleteEvt *e = Q_NEW(DeviceReadCompleteEvt, DEVICE_READ_COMPLETE_SIG);
            /* post directly to comms active object */
            QACTIVE_POST((QActive *)&amp;Comms_inst, (QEvt *)e, (void *)0);
            break;
        }
        case 'w':
        {    /* 'w': device write request */
            DeviceWriteEvt *e = Q_NEW(DeviceWriteEvt, DEVICE_WRITE_SIG);
            /* post directly to comms active object */
            QACTIVE_POST((QActive *)&amp;Comms_inst, (QEvt *)e, (void *)0);
            break;
        }
        case 'W':
        {    /* 'W': device write completed */
            DeviceWriteCompleteEvt *e = Q_NEW(DeviceWriteCompleteEvt, DEVICE_WRITE_COMPLETE_SIG);
            /* post directly to comms active object */
            QACTIVE_POST((QActive *)&amp;Comms_inst, (QEvt *)e, (void *)0);
            break;
        }
    }
}
</text>
  </file>
 </directory>
</model>
